#!/usr/bin/env python3
"""
Script de inicializa√ß√£o da API RotaF√°cil
Este script verifica as depend√™ncias e inicia a aplica√ß√£o
"""

import sys
import subprocess
import os
from pathlib import Path

def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel"""
    if sys.version_info < (3, 9):
        print("‚ùå Erro: Python 3.9 ou superior √© necess√°rio")
        print(f"Vers√£o atual: {sys.version}")
        return False
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} detectado")
    return True

def check_mongodb():
    """Verifica se o MongoDB est√° dispon√≠vel"""
    try:
        import motor
        print("‚úÖ Motor (MongoDB driver) dispon√≠vel")
        return True
    except ImportError:
        print("‚ùå Motor n√£o encontrado. Execute: pip install -r requirements.txt")
        return False

def install_dependencies():
    """Instala as depend√™ncias se necess√°rio"""
    if not os.path.exists("venv"):
        print("üì¶ Criando ambiente virtual...")
        subprocess.run([sys.executable, "-m", "venv", "venv"], check=True)
        print("‚úÖ Ambiente virtual criado")
    
    # Ativa o ambiente virtual
    if os.name == 'nt':  # Windows
        activate_script = "venv\\Scripts\\activate"
    else:  # Linux/Mac
        activate_script = "venv/bin/activate"
    
    print("üì¶ Instalando depend√™ncias...")
    try:
        subprocess.run([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"], check=True)
        print("‚úÖ Depend√™ncias instaladas")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Erro ao instalar depend√™ncias")
        return False

def check_config():
    """Verifica se o arquivo de configura√ß√£o existe"""
    if not os.path.exists("config.env"):
        print("‚ùå Arquivo config.env n√£o encontrado")
        print("üìù Criando arquivo de configura√ß√£o padr√£o...")
        
        config_content = """MONGODB_URL=mongodb://localhost:27017
DATABASE_NAME=rotafacil"""
        
        with open("config.env", "w") as f:
            f.write(config_content)
        print("‚úÖ Arquivo config.env criado")
    
    print("‚úÖ Configura√ß√£o verificada")

def start_application():
    """Inicia a aplica√ß√£o"""
    print("\nüöÄ Iniciando API RotaF√°cil...")
    print("üìñ Documenta√ß√£o dispon√≠vel em: http://localhost:8000/docs")
    print("üîç ReDoc dispon√≠vel em: http://localhost:8000/redoc")
    print("üè• Health check: http://localhost:8000/health")
    print("\nPressione Ctrl+C para parar a aplica√ß√£o\n")
    
    try:
        subprocess.run([sys.executable, "main.py"], check=True)
    except KeyboardInterrupt:
        print("\nüëã Aplica√ß√£o encerrada pelo usu√°rio")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao iniciar aplica√ß√£o: {e}")

def main():
    """Fun√ß√£o principal"""
    print("=" * 60)
    print("üöå RotaF√°cil API - Sistema de Gerenciamento de Transporte")
    print("=" * 60)
    
    # Verifica√ß√µes iniciais
    if not check_python_version():
        sys.exit(1)
    
    check_config()
    
    # Instala depend√™ncias se necess√°rio
    if not check_mongodb():
        if not install_dependencies():
            sys.exit(1)
    
    print("\n‚úÖ Todas as verifica√ß√µes passaram!")
    print("\nüí° Dicas:")
    print("   - Certifique-se de que o MongoDB est√° rodando")
    print("   - Use 'python exemplos_uso.py' para testar a API")
    print("   - Acesse http://localhost:8000/docs para a documenta√ß√£o interativa")
    
    # Pergunta se deve iniciar a aplica√ß√£o
    response = input("\nüéØ Deseja iniciar a aplica√ß√£o agora? (s/n): ").lower().strip()
    if response in ['s', 'sim', 'y', 'yes']:
        start_application()
    else:
        print("\nüìù Para iniciar manualmente, execute: python main.py")

if __name__ == "__main__":
    main() 